r"""
By Dylon Edwards
"""

import numpy as np

import pytest

import hypothesis

from open_belex.bleir.types import Example, Snippet, ValueParameter
from open_belex.bleir.virtual_machines import BLEIRVirtualMachine
from open_belex.common.constants import NUM_PLATS_PER_APUC
from open_belex.common.mask import Mask
from open_belex.utils.path_utils import user_tmp
from open_belex_tests.strategies import Snippet_strategy

NREGS = 16


# def build_parameters():
#     """Randomly generates the initial state for the application."""

#     global NREGS

#     diri = DIRI()
#     diri.repeatably_randomize_half_bank()

#     parameters = []
#     for rn_reg_id in range(1, NREGS + 1):
#         vr = diri.hb[rn_reg_id]
#         vr = [Mask(plat).full_integer for plat in vr]
#         vr = np.array(vr, dtype=np.uint16)
#         parameters.append(
#             ValueParameter(
#                 identifier=f"vr_{rn_reg_id}",
#                 rn_reg_id=rn_reg_id,
#                 value=vr
#             )
#         )

#     return tuple(parameters)


# PARAMETERS = build_parameters()

# Run with `pytest -m overnight`
# @pytest.mark.overnight
# @hypothesis.settings(deadline=None,
#                      max_examples=200,
#                      print_blob=True,
#                      # Options: quiet, normal, verbose, debug
#                      verbosity=hypothesis.Verbosity.normal,
#                      report_multiple_bugs=False,
#                      database=None,  # no storage
#                      phases=(
#                          # hypothesis.Phase.explicit,
#                          # hypothesis.Phase.reuse,
#                          hypothesis.Phase.generate,
#                          # hypothesis.Phase.target,
#                          # hypothesis.Phase.shrink
#                      ),
#                      suppress_health_check=[
#                          hypothesis.HealthCheck.too_slow,
#                          hypothesis.HealthCheck.data_too_large,
#                      ])
# @hypothesis.given(snippet=Snippet_strategy())
# def test_random_snippet(snippet: Snippet) -> None:
#     global PARAMETERS
#     global NREGS

#     # The utilized SBs range from 1 to 16. SB 0 is reserved for I/O and SBs 21 through 23 are
#     # reserved for other purposes. As such and since no more than 16 SBs may be processed by a
#     # fragment, I've chosen to restrict the range of usable SBs from 1 to 16. This means SB 17
#     # should not be touched by the application, and we are exploiting that detail to specify the
#     # initial state of the application before running it to collect its end state as the expected
#     # final state for the generated code.
#     snippet.examples = tuple([
#         Example(
#             expected_value=ValueParameter(
#                 identifier="out_17",
#                 rn_reg_id=17,
#                 value=np.zeros(NUM_PLATS_PER_APUC, dtype=np.uint16)
#             ),
#             parameters=PARAMETERS  # PARAMETERS is a global variable generated by build_parameters()
#         )
#     ])

#     # Execute the application to collect its expected final state.
#     diri = DIRI()
#     interpreter = BLEIRVirtualMachine(interpret=True,
#                                       generate_code=False,
#                                       enable_optimizations=True,
#                                       diri=diri)
#     snippet = interpreter.compile(snippet)

#     examples = []
#     for rn_reg_id in range(1, NREGS + 1):
#         expected_value = diri.hb[rn_reg_id]
#         expected_value = [Mask(plat).full_integer for plat in expected_value]
#         expected_value = np.array(expected_value, dtype=np.uint16)
#         examples.append(
#             Example(
#                 expected_value=ValueParameter(
#                     identifier=f"out_{rn_reg_id}",
#                     rn_reg_id=rn_reg_id,
#                     value=expected_value
#                 ),
#                 parameters=PARAMETERS
#             )
#         )

#     snippet.examples = tuple(examples)

#     # VALIDATION: Run the application again, asserting the expected values
#     # NOTE: This is currently SLOW, uncomment at your peril ...
#     # interpreter.visit_snippet(snippet)

#     # Generate the application source within output_dir
#     output_dir = user_tmp() / "bleir" / snippet.name / "build"
#     compiler = BLEIRVirtualMachine(interpret=False,
#                                    generate_code=True,
#                                    output_dir=output_dir,
#                                    enable_optimizations=False)
#     compiler.compile(snippet)
