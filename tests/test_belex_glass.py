r"""
By Dylon Edwards
"""

from collections import deque

import numpy as np

from open_belex.common.constants import (NUM_PLATS_PER_APUC,
                                         NUM_PLATS_PER_HALF_BANK)
from open_belex.diri.half_bank import DIRI
from open_belex.literal import (ERL, GGL, GL, INV_ERL, INV_GGL, INV_GL,
                                INV_NRL, INV_RL, INV_RSP16, INV_SRL, INV_WRL,
                                L1, L2, LGL, NOOP, NRL, RL, RSP2K, RSP16,
                                RSP32K, RSP256, SRL, VR, WRL, apl_commands,
                                belex_apl)
from open_belex.utils.example_utils import convert_to_bool

from open_belex_libs.common import reset_16

from open_belex_tests.utils import parameterized_belex_test


@belex_apl
def demo_belex_glass(Belex, src: VR, l1: L1):
    global NUM_PLATS

    Belex.glass(src, plats=32, sections=8, balloon=False)
    Belex.glass(src, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(src, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    RL[::] <= src()

    Belex.glass(RL, plats=32, sections=8, balloon=False)
    Belex.glass(RL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(RL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(INV_RL, plats=32, sections=8, balloon=False)
    Belex.glass(INV_RL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(INV_RL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(NRL, plats=32, sections=8, balloon=False)
    Belex.glass(NRL, plats=32, sections=8, order="lsb", balloon=False)
    Belex.glass(NRL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(NRL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(INV_NRL, plats=32, sections=8, balloon=False)
    Belex.glass(INV_NRL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(INV_NRL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(ERL, plats=slice(2048-32, 2048), sections=8, balloon=False)
    Belex.glass(ERL, plats=slice(2048-32, 2048), sections=8, fmt="bin", balloon=False)
    Belex.glass(ERL, plats=slice(2048-32, 2048), sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(INV_ERL, plats=slice(2048-32, 2048), sections=8, balloon=False)
    Belex.glass(INV_ERL, plats=slice(2048-32, 2048), sections=8, fmt="bin", balloon=False)
    Belex.glass(INV_ERL, plats=slice(2048-32, 2048), sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(WRL, plats=32, sections=8, balloon=False)
    Belex.glass(WRL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(WRL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(INV_WRL, plats=32, sections=8, balloon=False)
    Belex.glass(INV_WRL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(INV_WRL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(SRL, plats=32, sections=8, balloon=False)
    Belex.glass(SRL, plats=32, sections=8, order="lsb", balloon=False)
    Belex.glass(SRL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(SRL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(INV_SRL, plats=32, sections=8, balloon=False)
    Belex.glass(INV_SRL, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(INV_SRL, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    GL[::] <= RL()

    Belex.glass(GL, plats=32, balloon=False)

    Belex.glass(INV_GL, plats=32, balloon=False)

    GGL[::] <= RL()

    Belex.glass(GGL, plats=32, balloon=False)
    Belex.glass(GGL, plats=32, fmt="bin", balloon=False)

    Belex.glass(INV_GGL, plats=32, balloon=False)
    Belex.glass(INV_GGL, plats=32, fmt="bin", balloon=False)

    l1() <= GGL()

    Belex.glass(l1, plats=32, balloon=False)
    Belex.glass(l1, plats=32, fmt="bin", balloon=False)

    RSP16[::] <= RL()

    Belex.glass(RSP16, plats=32, sections=8, balloon=False)
    Belex.glass(RSP16, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(RSP16, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    Belex.glass(INV_RSP16, plats=32, sections=8, balloon=False)
    Belex.glass(INV_RSP16, plats=32, sections=8, fmt="bin", balloon=False)
    Belex.glass(INV_RSP16, plats=32, sections=8, fmt="bin", order="msb", balloon=False)

    RSP256() <= RSP16()

    Belex.glass(RSP256, plats=8, sections=8, balloon=False)
    Belex.glass(RSP256, plats=8, sections=8, fmt="bin", balloon=False)
    Belex.glass(RSP256, plats=8, sections=8, fmt="bin", order="msb", balloon=False)

    RSP2K() <= RSP256()

    Belex.glass(RSP2K, plats=1, sections=8, balloon=False)
    Belex.glass(RSP2K, plats=1, sections=8, fmt="bin", balloon=False)
    Belex.glass(RSP2K, plats=1, sections=8, fmt="bin", order="msb", balloon=False)

    RSP32K() <= RSP2K()

    Belex.glass(RSP32K, sections=8, balloon=False)
    Belex.glass(RSP32K, sections=8, fmt="bin", balloon=False)
    Belex.glass(RSP32K, sections=8, fmt="bin", order="msb", balloon=False)


@parameterized_belex_test(interpret=False, generate_code=False)
def test_belex_glass(diri: DIRI):
    src_vp = 0
    l1_vmr = 0

    # 0 0 ... 0 0
    # 1 1 ... 1 1
    # ... ... ...
    # 0 0 ... 0 0
    # 1 1 ... 1 1
    diri.hb[src_vp] = np.tile([False, True], (NUM_PLATS_PER_APUC, 8))

    captured_rows = deque()

    demo_belex_glass(src_vp, l1_vmr, captured_glass=captured_rows)

    # src glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # RL glasses
    # ==========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_RL glasses
    # ==============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # NRL glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_NRL glasses
    # ===============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
        "[B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # ERL glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_ERL glasses
    # ===============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 F]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 F]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # WRL glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
        "[0 A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_ERL glasses
    # ===============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[F 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[F 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # SRL glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # INV_NRL glasses
    # ===============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # GL glasses
    # ==========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_GL glasses
    # ==============

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # GGL glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_GGL glasses
    # ===============

    assert captured_rows.popleft() == "\n".join([
        "[F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # l1 glasses
    # ===========

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # RSP16 glasses
    # =============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
        "[A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    # INV_RSP16 glasses
    # =================

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
        "[5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ])

    # RSP256 glasses
    # ==============

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[A A A A A A A A]",
        "[A A A A A A A A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0]",
    ])

    # RSP2K glasses
    # =============

    assert captured_rows.popleft() == "\n".join([
        "[0]",
        "[0]",
        "[A]",
        "[A]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0]",
        "[1]",
        "[0]",
        "[1]",
        "[0]",
        "[1]",
        "[0]",
        "[1]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[1]",
        "[0]",
        "[1]",
        "[0]",
        "[1]",
        "[0]",
        "[1]",
        "[0]",
    ])

    # RSP32K glasses
    # ==============

    assert captured_rows.popleft() == "\n".join([
        "[0]",
        "[0]",
        "[F]",
        "[F]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
    ])

    assert captured_rows.popleft() == "\n".join([
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[0]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
    ])


@belex_apl
def lane_w_glass(Belex):
    # Lane has only 4 commands, despite the Belex.glass statements
    with apl_commands():
        Belex.glass(RL)
        NOOP()
        Belex.glass(RL)
        NOOP()
        Belex.glass(RL)
        NOOP()
        Belex.glass(RL)
        NOOP()
        Belex.glass(RL)


@parameterized_belex_test
def test_lane_w_glass(diri: DIRI):
    reset_16(0)
    lane_w_glass()  # should not throw an error about too many laned commands
    return 0


@belex_apl
def glass_balloons(Belex, src: VR, vmr: L1, vior: L2):
    Belex.glass(src, plats=16, order="msb")
    Belex.glass(src, plats=16, order="msb", fmt="bin")

    Belex.glass(src, plats=16, order="lsb")
    Belex.glass(src, plats=16, order="lsb", fmt="bin")

    RL[::] <= src()

    Belex.glass(RL, plats=16, order="msb")
    Belex.glass(RL, plats=16, order="msb", fmt="bin")

    Belex.glass(RL, plats=16, order="lsb")
    Belex.glass(RL, plats=16, order="lsb", fmt="bin")

    GL[::] <= RL()

    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)

    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)

    GGL[::] <= RL()

    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)

    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)

    RSP16[::] <= RL()

    Belex.glass(RSP16, plats=16, order="msb")
    Belex.glass(RSP16, plats=16, order="msb", balloon=False)
    Belex.glass(RSP16, plats=16, order="msb", fmt="bin")
    Belex.glass(RSP16, plats=16, order="msb", fmt="bin", balloon=False)

    Belex.glass(RSP16, plats=16, order="lsb")
    Belex.glass(RSP16, plats=16, order="lsb", balloon=False)
    Belex.glass(RSP16, plats=16, order="lsb", fmt="bin")
    Belex.glass(RSP16, plats=16, order="lsb", fmt="bin", balloon=False)

    RSP256() <= RSP16()

    Belex.glass(RSP256, plats=16, order="msb")
    Belex.glass(RSP256, plats=16, order="msb", balloon=False)
    Belex.glass(RSP256, plats=16, order="msb", fmt="bin")
    Belex.glass(RSP256, plats=16, order="msb", fmt="bin", balloon=False)

    Belex.glass(RSP256, plats=16, order="lsb")
    Belex.glass(RSP256, plats=16, order="lsb", balloon=False)
    Belex.glass(RSP256, plats=16, order="lsb", fmt="bin")
    Belex.glass(RSP256, plats=16, order="lsb", fmt="bin", balloon=False)

    RSP2K() <= RSP256()

    Belex.glass(RSP2K, plats=16, order="msb")
    Belex.glass(RSP2K, plats=16, order="msb", balloon=False)
    Belex.glass(RSP2K, plats=16, order="msb", fmt="bin")
    Belex.glass(RSP2K, plats=16, order="msb", fmt="bin", balloon=False)

    Belex.glass(RSP2K, plats=16, order="lsb")
    Belex.glass(RSP2K, plats=16, order="lsb", balloon=False)
    Belex.glass(RSP2K, plats=16, order="lsb", fmt="bin")
    Belex.glass(RSP2K, plats=16, order="lsb", fmt="bin", balloon=False)

    RSP32K() <= RSP2K()

    Belex.glass(RSP32K, plats=16, order="msb")
    Belex.glass(RSP32K, plats=1, order="msb", balloon=False)
    Belex.glass(RSP32K, plats=16, order="msb", fmt="bin")
    Belex.glass(RSP32K, plats=1, order="msb", fmt="bin", balloon=False)

    Belex.glass(RSP32K, plats=16, order="lsb")
    Belex.glass(RSP32K, plats=1, order="lsb", balloon=False)
    Belex.glass(RSP32K, plats=16, order="lsb", fmt="bin")
    Belex.glass(RSP32K, plats=1, order="lsb", fmt="bin", balloon=False)

    vmr() <= GGL()

    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)

    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)

    LGL() <= vmr()

    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb")
    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb", balloon=False)
    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb", fmt="bin")
    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb", fmt="bin", balloon=False)

    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb")
    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb", balloon=False)
    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb", fmt="bin")
    Belex.glass(LGL, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb", fmt="bin", balloon=False)

    vior() <= LGL()

    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb")
    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb", balloon=False)
    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb", fmt="bin")
    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="msb", fmt="bin", balloon=False)

    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb")
    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb", balloon=False)
    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb", fmt="bin")
    Belex.glass(vior, plats=range(NUM_PLATS_PER_HALF_BANK - 16, NUM_PLATS_PER_HALF_BANK), order="lsb", fmt="bin", balloon=False)


@parameterized_belex_test(interpret=False, generate_code=False)
def test_glass_balloons(diri: DIRI):
    src = 0
    vmr = 0
    vior = 0

    data = np.arange(1 + 0xFFFF - NUM_PLATS_PER_APUC, 1 + 0xFFFF, dtype=np.uint16)
    diri.hb[src, ::, ::] = convert_to_bool(data)

    captured_glass = deque()
    glass_balloons(src, vmr, vior, captured_glass=captured_glass)

    # Belex.glass(src, plats=16, order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
    ]

    # Belex.glass(src, plats=16, order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
    ]

    # Belex.glass(src, plats=16, order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(src, plats=16, order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RL, plats=16, order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
    ]

    # Belex.glass(RL, plats=16, order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
    ]

    # Belex.glass(RL, plats=16, order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(RL, plats=16, order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[E E E E E E E E E E E E E E E F]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[E E E E E E E E E E E E E E E F]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(GGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP16, plats=16, order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP16, plats=16, order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP16, plats=16, order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP16, plats=16, order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP16, plats=16, order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(RSP16, plats=16, order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(RSP16, plats=16, order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP16, plats=16, order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP256, plats=16, order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP256, plats=16, order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP256, plats=16, order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP256, plats=16, order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP256, plats=16, order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(RSP256, plats=16, order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[0 1 2 3 4 5 6 7 8 9 A B C D E F]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(RSP256, plats=16, order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP256, plats=16, order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP2K, plats=16, order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
        "[7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP2K, plats=16, order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[8 8 9 9 A A B B C C D D E E F F]",
        "[7 F 7 F 7 F 7 F 7 F 7 F 7 F 7 F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP2K, plats=16, order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP2K, plats=16, order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP2K, plats=16, order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7]",
        "[8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8]",
    ]

    # Belex.glass(RSP2K, plats=16, order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[7 F 7 F 7 F 7 F 7 F 7 F 7 F 7 F]",
        "[8 8 9 9 A A B B C C D D E E F F]",
    ]

    # Belex.glass(RSP2K, plats=16, order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP2K, plats=16, order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]",
        "[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]",
        "[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP32K, plats=16, order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP32K, plats=1, order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[F]",
        "[F]",
        "[F]",
        "[F]",
    ]

    # Belex.glass(RSP32K, plats=16, order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP32K, plats=1, order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
    ]

    # Belex.glass(RSP32K, plats=16, order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
        "[F F F F F F F F F F F F F F F F]",
    ]

    # Belex.glass(RSP32K, plats=1, order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[F]",
        "[F]",
        "[F]",
        "[F]",
    ]

    # Belex.glass(RSP32K, plats=16, order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(RSP32K, plats=1, order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
        "[1]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[E E E E E E E E E E E E E E E F]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[E E E E E E E E E E E E E E E F]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[E E E E E E E E E E E E E E E F]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[E E E E E E E E E E E E E E E F]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(vmr, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
        "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(LGL, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="msb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin")
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]

    # Belex.glass(vior, plats=range(NUM_PLATS_PER_APUC - 16, NUM_PLATS_PER_APUC), order="lsb", fmt="bin", balloon=False)
    assert captured_glass.popleft().split("\n") == [
        "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]",
    ]


@belex_apl
def rewrite_patterns(Belex, src: VR):
    Belex.glass(src, plats=32, fmt="bin", rewrite={
        "0": ".",
        "1": "x",
    })


@parameterized_belex_test(interpret=False, generate_code=False)
def test_rewrite_patterns(diri: DIRI):
    src_vp = 0

    diri[src_vp, :32] = [
        "00000000000000010000000000000000",
        "00000000000000101000000000000000",
        "00000000000001000100000000000000",
        "00000000000010000010000000000000",
        "00000000000100000001000000000000",
        "00000000001000000000100000000000",
        "00000000010000000000010000000000",
        "00000000100000000000001000000000",
        "00000000100000000000001000000000",
        "00000000010000000000010000000000",
        "00000000001000000000100000000000",
        "00000000000100000001000000000000",
        "00000000000010000010000000000000",
        "00000000000001000100000000000000",
        "00000000000000101000000000000000",
        "00000000000000010000000000000000",
    ]

    captured_glass = []
    rewrite_patterns(src_vp, captured_glass=captured_glass)
    assert captured_glass[0] == "\n".join([
        "[. . . . . . . . . . . . . . . x . . . . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . . . x . x . . . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . . x . . . x . . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . x . . . . . x . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . x . . . . . . . x . . . . . . . . . . . .]",
        "[. . . . . . . . . . x . . . . . . . . . x . . . . . . . . . . .]",
        "[. . . . . . . . . x . . . . . . . . . . . x . . . . . . . . . .]",
        "[. . . . . . . . x . . . . . . . . . . . . . x . . . . . . . . .]",
        "[. . . . . . . . x . . . . . . . . . . . . . x . . . . . . . . .]",
        "[. . . . . . . . . x . . . . . . . . . . . x . . . . . . . . . .]",
        "[. . . . . . . . . . x . . . . . . . . . x . . . . . . . . . . .]",
        "[. . . . . . . . . . . x . . . . . . . x . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . x . . . . . x . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . . x . . . x . . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . . . x . x . . . . . . . . . . . . . . .]",
        "[. . . . . . . . . . . . . . . x . . . . . . . . . . . . . . . .]",
    ])
