#!/usr/bin/env bash
# -------------------------------------------------------------------------------
# By Dylon Edwards
#
# Copyright 2019 - 2023 GSI Technology, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

shopt -s nocasematch
if [[ "$DEBUG_MODE" =~ ^(true|yes|on|1)$ ]]; then
    set -x
fi
shopt -u nocasematch

BASE_DIR="$(dirname "$0")"
source "${BASE_DIR}/common.sh"

export BLECCI_DIR="${BLECCI_DIR:-$HOME/.local/share/blecci}"

# Keep local failure exit codes even (odd exit codes come from common.sh)
EXIT_NO_OUTPUT_DIR=2
EXIT_NO_BELEX_DIR=4
EXIT_COPY_FAILED=6
EXIT_BLECCI_DIR_NOT_DEL=8
EXIT_FAILED_COPY_BELEX_TEST=10
EXIT_FAILED_TO_MK_EXAMPLES_DIR=12
EXIT_FAILED_TO_GEN_MANIFEST=14
EXIT_INVALID_BUILD_TYPE=16

# Whether to print help text and exit
declare PRINT_HELP

export EXAMPLES_DIR
export MESON_BUILD_PATH

# Holds the location of the directory with the manifest
declare OUTPUT_DIR
declare IMPLICIT_OUTPUT_DIR

# [OPTIONAL] Holds the path to the folder containing all the BELEX files
declare BELEX_DIR
declare IMPLICIT_BELEX_DIR

# Holds the BELEX command-line options
declare -a BELEX_OPTS
declare -a BELEX_FILES

declare EXPLICIT_BUILD_DIR

GENERATE_BELEX_EXAMPLES=true
BUILD_BELEX_TESTS=true
declare SOURCE_ONLY
declare RUN_ONLY

function clean-up-blecci-dir() {
    local RETURN_CODE

    if [ -d "$BLECCI_DIR" ]; then
        echo "Deleting [$BLECCI_DIR]"
        rm -rf "$BLECCI_DIR"
        RETURN_CODE=$?
        if (( RETURN_CODE != EXIT_SUCCESS )); then
            echo "`rm -rf \"${BLECCI_DIR}\"` failed with exit code: ${RETURN_CODE}" 1>&2
            return $EXIT_BLECCI_DIR_NOT_DEL
        fi
    fi

    return $EXIT_SUCCESS
}

function copy-blecci-test-to-srcgen() {
    local BLECCI_TEST_PATH="$1"
    local BLECCI_TEST_NAME="test_llb_$(basename "$BLECCI_TEST_PATH")"
    local RETURN_CODE

    if [[ -e "$BELEX_TEST_DIR/gensrc/${BLECCI_TEST_NAME}" ]]; then
        rm -rf "$BELEX_TEST_DIR/gensrc/${BLECCI_TEST_NAME}"
        RETURN_CODE=$?
        if (( RETURN_CODE != EXIT_SUCCESS )); then
            echo "Failed to remove [$BELEX_TEST_DIR/gensrc/${BLECCI_TEST_NAME}], rm exited with: ${RETURN_CODE}" 1>&2
            return $EXIT_XARGS_FAILURE
        fi
    fi

    echo "Copying [${BLECCI_TEST_PATH}] to [$BELEX_TEST_DIR/gensrc/${BLECCI_TEST_NAME}]"
    cp -r "${BLECCI_TEST_PATH}" "$BELEX_TEST_DIR/gensrc/${BLECCI_TEST_NAME}"
    RETURN_CODE=$?
    if (( RETURN_CODE != EXIT_SUCCESS )); then
        echo "Failed to copy \"${BLECCI_TEST_PATH}\", cp failed with exit code: ${RETURN_CODE}" 1>&2
        return $EXIT_XARGS_FAILURE
    fi

    return $EXIT_SUCCESS
}

export -f copy-blecci-test-to-srcgen

function copy-blecci-tests-to-srcgen() {
    local RETURN_CODE

    find "$BLECCI_DIR" -mindepth 1 -maxdepth 1 -type d -print0 \
        | xargs -0 -n1 bash -c 'copy-blecci-test-to-srcgen "$0"'

    RETURN_CODE=$?
    if (( RETURN_CODE != EXIT_SUCCESS )); then
        return $EXIT_FAILED_COPY_BELEX_TEST
    fi

    return $EXIT_SUCCESS
}

function generate-manifest() {
    local RETURN_CODE

    mkdir -p "$EXAMPLES_DIR"
    RETURN_CODE=$?
    if (( RETURN_CODE != EXIT_SUCCESS )); then
        echo "Failed to create examples dir, mkdir failed with exit code: $RETURN_CODE" 1>&2
        return $EXIT_FAILED_TO_MK_EXAMPLES_DIR
    fi

    echo "Generating manifest: [${MESON_BUILD_PATH}]"

    # Truncate the manifest
    :> "$MESON_BUILD_PATH"

    echo "# Generated by: $USER" >> "$MESON_BUILD_PATH"
    echo "# Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%S.%6N')" >> "$MESON_BUILD_PATH"
    find "$BLECCI_DIR" -mindepth 1 -maxdepth 1 -type d -print0 \
        | xargs -0 -n1 basename \
        | sort \
        | xargs -n1 -I BLECCI_NYM echo -e "\n# From: $BLECCI_DIR/BLECCI_NYM\nsubdir('test_llb_BLECCI_NYM')" \
                >> "$MESON_BUILD_PATH"

    RETURN_CODE=$?
    if (( RETURN_CODE != EXIT_SUCCESS )); then
        echo "Generating manifest failed with exit code: $RETURN_CODE" 1>&2
        return $EXIT_FAILED_TO_GEN_MANIFEST
    fi

    return $EXIT_SUCCESS
}

function parse-opts() {
    local CURRENT_DIR
    local OPTION
    local LVALUE
    local RVALUE

    while (( $# )); do
        OPTION="$1"
        case "$OPTION" in
            -h|--help)
                PRINT_HELP=true
                shift
                ;;
            -f|--enable-optimization)
                BELEX_OPTS+=("$1" "$2")
                shift 2
                ;;
            -d|--belex-dir)
                BELEX_OPTS+=("$1" "$2")
                BELEX_DIR="$2"
                shift 2
                ;;
            -o|--output-dir)
                BELEX_OPTS+=("$1" "$2")
                OUTPUT_DIR="$2"
                shift 2
                ;;
            -C|--build-dir)
                MESON_BUILD_DIR="$2"
                EXPLICIT_BUILD_DIR=true
                shift 2
                ;;
            -t|--build-type)
                BUILD_TYPE="$2"
                shift 2
                ;;
            --config)
                BELEX_OPTS+=("$1" "$2")
                shift 2
                ;;
            --log-level)
                BELEX_OPTS+=("$1" "$2")
                shift 2
                ;;
            -O[01234])
                BELEX_OPTS+=("$1")
                shift
                ;;
            -O|--optimization-level)
                BELEX_OPTS+=("$1" "$2")
                shift 2
                ;;
            --generate)
                GENERATE_BELEX_EXAMPLES=true
                shift
                ;;
            --no-generate)
                GENERATE_BELEX_EXAMPLES=
                shift
                ;;
            --build)
                BUILD_BELEX_TESTS=true
                shift
                ;;
            --no-build)
                BUILD_BELEX_TESTS=
                shift
                ;;
            --source-only)
                SOURCE_ONLY=true
                shift
                ;;
            --run-only)
                RUN_ONLY=true
                shift
                ;;
            --shuffle)
                SHUFFLE_TESTS=true
                shift
                ;;
            --*=*)
                shift
                LVALUE="${OPTION/=*}"
                RVALUE="${OPTION:1+${#LVALUE}}"
                set -- "$LVALUE" "$RVALUE" "$@"
                ;;
            -[a-z][a-z]*)
                shift # Expand short args in reverse, in case the right-most arg
                # accepts a parameter.
                for (( i = ${#OPTION} - 1; i > 0; i -= 1 )); do
                    set -- "-${OPTION:$i:1}" "$@"
                done
                ;;
            *)
                BELEX_FILES+=("$1")
                shift
                ;;
        esac
    done

    if [ -n "$BELEX_DIR" ]; then
        BELEX_DIR="$(realpath "$BELEX_DIR")"
    fi

    # [HEURISTIC] If no tests or test directory were specified, try the default
    if [ -z "$BELEX_DIR" ] && (( ${#BELEX_FILES[@]} == 0 )); then
        if [ -d "${PWD}/tests" ]; then
            BELEX_DIR="${PWD}/tests"
            IMPLICIT_BELEX_DIR=true
        else
            echo "Cannot determine BELEX source directory" 1>&2
            return $EXIT_NO_BELEX_DIR
        fi
    fi

    if [[ "$BUILD_TYPE" != "baryon" ]]; then
        echo "BUILD_TYPE must be \"baryon\"" 1>&2
        return $EXIT_INVALID_BUILD_TYPE
    fi

    if [[ "$BUILD_TYPE" == "baryon" ]]; then
        BELEX_OPTS+=("--target" "baryon")
        MESON_OPTS+=(
            "-Dwith-baryon=true"
            "-Dbaryon-prefix-path=$CONDA_PREFIX"
        )
    fi

    if [ -z "$EXPLICIT_BUILD_DIR" ]; then
        MESON_BUILD_DIR="${PWD}/build/${BUILD_TYPE}"
    fi

    # [HEURISTIC] Determine the correct output dir
    if [ -z "$OUTPUT_DIR" ]; then
        OUTPUT_DIR="${PWD}/gensrc"
        IMPLICIT_OUTPUT_DIR=true
    fi

    if [ -z "$OUTPUT_DIR" ]; then
        echo "No output directory specified" 1>&2
        return $EXIT_NO_OUTPUT_DIR
    fi

    mkdir -p "$OUTPUT_DIR"
    OUTPUT_DIR="$(realpath "$OUTPUT_DIR")"
    export MANIFEST="$OUTPUT_DIR/meson.build"

    return $EXIT_SUCCESS
}

function print-help() {
    cat <<'EOF'
Executes BELEX tests on hardware or baryon with a pytest-like interface.

Options:
  -h|--help                          Prints this help text.
  -O|--optimization-level 0|1|2|3|4  Specifies the level of optimizations and
                                     transformative features to enable for
                                     codegen. (Default: 2)
  -f|--enable-optimization <NAME>    [Optional] Specifies an optimization over
                                     the generated code.
  -d|--belex-dir <PATH>              [Optional] Path to the folder containing the
                                     BELEX files. If neither a --belex-dir nor
                                     BELEX_FILE is provided, an attempt will be
                                     made to guess the --belex-dir path.
  -o|--output-dir <PATH>             [Optional] Where to place the generated
                                     examples. If no --output-dir is provided an
                                     attempt will be made to guess it.
  -C|--build-dir <PATH>              [Optional] Path to the meson build directory.
  -t|--build-type baryon             [Optional] Target platform of the build
                                     ("baryon"; default: "baryon")
  --config <PATH>                    Specifies path to the BELEX config YAML file.
  --log-level DEFAULT|VERBOSE|DEBUG  [Optional] Specifies the verbosity of output
                                     from the compiler. (Default: DEFAULT)
  --[no-]generate                    Whether to generate examples or reuse those
                                     which have already been generated.
  --[no-]build                       Whether to rebuild the belex tests or use
                                     the already existing executables.
  --source-only                      Whether to only generate the source code
                                     (no building or execution).
  --run-only                         Just run the test(s), do not generate
                                     sources or build them.
  --shuffle                          Shuffle the test for execution

Usage: belex-test \
  [--optimization-level OPTIMIZATION_LEVEL] \
  [--enable-optimization OPTIMIZATION_NAME]... \
  [--belex-dir /path/to/tests] \
  [--output-dir /path/to/libs-gvml/gensrc] \
  [--[no-]generate] \
  [--[no-]build] \
  [--source-only] \
  [--run-only] \
  [--shuffle] \
  [BELEX_FILE[::FRAGMENT_OR_TEST_NAME]]...

Examples:

  # Default --belex-dir and --output-dir (runs all high-level tests)
  belex-test -O2

  # Default --output-dir (runs all high-level tests)
  belex-test --belex-dir tests

  # Default --belex-dir (runs all tests)
  belex-test -O3 --output-dir gensrc

  # Explicit --belex-dir and --output-dir (runs all tests)
  belex-test --belex-dir tests --output-dir gensrc

  # Runs just test_belex_xor_u16 with default options
  belex-test tests/test_belex_xor_u16.py::xor_u16

  # Explicit output dir with two optimizations, a specific fragment, and a test
  # file to run.
  belex-test --output-dir gensrc \
    -f eliminate-read-after-write \
    -f delete-dead-writes \
    -f replace-zero-xor \
    tests/test_belex_basic_tests.py::and_u16d \
    tests/test_belex_add_u16.py
EOF
}

function repo-root() {
    python <<'EOF'
from pathlib import Path
import belex_tests
module_path = Path(belex_tests.__file__)
repo_root = module_path.parent.parent.parent
print(repo_root, end="")
EOF
}

function is-belex-test-root() {
    if [ -f ".project-root" ] \
           && [ "open-belex-tests" == "$(echo $(cat ".project-root"))" ]; then
        return 0
    fi
    return 1
}

function main() {
    local RETURN_CODE

    parse-opts "$@"
    RETURN_CODE=$?

    if [ -n "$PRINT_HELP" ]; then
        print-help
        return $EXIT_SUCCESS
    fi

    if (( RETURN_CODE != EXIT_SUCCESS )); then
        return $RETURN_CODE
    fi

    if [ -n "$IMPLICIT_BELEX_DIR" ]; then
        BELEX_OPTS+=( "--belex-dir" "$BELEX_DIR" )
    fi

    if [ -n "$IMPLICIT_OUTPUT_DIR" ]; then
        BELEX_OPTS+=( "--output-dir" "$OUTPUT_DIR" )
    fi

    if (( ${#BELEX_FILES[@]} > 0 )); then
        BELEX_OPTS+=("${BELEX_FILES[@]}")
    fi

    if [ -n "$GENERATE_BELEX_EXAMPLES" ] && [ -z "$RUN_ONLY" ]; then
        generate-belex-examples "${BELEX_OPTS[@]}"
        RETURN_CODE=$?

        if (( RETURN_CODE != EXIT_SUCCESS )); then
            echo "generate-belex-examples failed with exit code ${RETURN_CODE}" 1>&2
            return $RETURN_CODE
        fi
    fi

    if [ -z "$SOURCE_ONLY" ]; then
        if [ -n "$IMPLICIT_OUTPUT_DIR" ]; then
            export BELEX_TEST_DIR="$PWD"

            if ! is-belex-test-root; then
                if [ -f "$(repo-root)/meson.build" ]; then
                    cp "$(repo-root)/meson.build" .
                    RETURN_CODE=$?
                elif [ -f "${CONDA_PREFIX}/share/belex/meson.build" ]; then
                    cp "${CONDA_PREFIX}/share/belex/meson.build" .
                    RETURN_CODE=$?
                else
                    RETURN_CODE=$EXIT_COPY_FAILED
                fi

                if (( RETURN_CODE != EXIT_SUCCESS )); then
                    echo "Failed to copy meson.build to current directory" 1>&2
                    return $EXIT_COPY_FAILED
                fi

                if [ -f "$(repo-root)/meson_options.txt" ]; then
                    cp "$(repo-root)/meson_options.txt" .
                elif [ -f "${CONDA_PREFIX}/share/belex/meson_options.txt" ]; then
                    cp "${CONDA_PREFIX}/share/belex/meson_options.txt" .
                else
                    RETURN_CODE=$EXIT_COPY_FAILED
                fi

                if (( RETURN_CODE != EXIT_SUCCESS )); then
                    echo "Failed to copy meson_options.txt to current directory" 1>&2
                    return $EXIT_COPY_FAILED
                fi
            fi
        else
            find-belex-test-dir "$OUTPUT_DIR"
            RETURN_CODE=$?

            if (( RETURN_CODE != EXIT_SUCCESS )); then
                return $RETURN_CODE
            fi
        fi

        prepare-environment
        RETURN_CODE=$?

        if (( RETURN_CODE != EXIT_SUCCESS )); then
            return $RETURN_CODE
        fi

        parse-manifest
        RETURN_CODE=$?

        if (( RETURN_CODE != EXIT_SUCCESS )); then
            return $RETURN_CODE
        fi

        if [ -n "$BUILD_BELEX_TESTS" ] && [ -z "$RUN_ONLY" ]; then
            build-belex-tests
            RETURN_CODE=$?

            if (( RETURN_CODE != EXIT_SUCCESS )); then
                return $RETURN_CODE
            fi
        fi

        run-belex-tests
        RETURN_CODE=$?

        if (( RETURN_CODE != EXIT_SUCCESS )); then
            return $RETURN_CODE
        fi

        echo "Done."
    fi

    return $EXIT_SUCCESS
}

main "$@"
exit $?
